<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{{ .title }} - File Upload</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
  <link rel="stylesheet" href="/static/style.css">
  <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
  <!-- Include Select2 CSS and JS -->
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
  <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
  <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
</head>

<body>
   <div class="container">
     <h1>Welcome to {{ .title }}</h1>
     <p>Store and share your files securely with {{ .title }}.</p>

       {{ if .authRequired}}
       <p>Only API uploads are accepted</p>
       {{ else}}
       <div class="tabs">
       <div class="tab-buttons">
         <button class="tab-button active" onclick="openTab(event, 'upload-tab')">File Upload</button>
         <button class="tab-button" onclick="openTab(event, 'paste-tab')">Text Paste</button>
         <button class="tab-button" onclick="openTab(event, 'audio-tab')">Audio Record</button>
         <button class="tab-button" onclick="openTab(event, 'limits-tab')">Limits</button>
       </div>

         <div id="upload-tab" class="tab-content active">
           <div class="code-container">
             <h4 style="text-align: start;">Curl upload</h4>
             <div class="code-line">
               <pre style="background-color: #111;"><code>curl -s -F "file=@/path/to/file" {{ .uploadEP }}</code></pre>
               <button onclick="copyCode()">Copy</button>
             </div>
           </div>

           <div class="upload-container">
             <div id="upload-boxes-container">
               <div class="upload-box" ondrop="handleFileDrop(event, this)"
                   ondragover="event.preventDefault(); this.classList.add('dragover')"
                   ondragleave="this.classList.remove('dragover')">
                 <label for="file-upload-0">Click or drop files here to stage for upload</label>
                 <input type="file" id="file-upload-0" name="file" multiple
                   onchange="handleFileSelect(event)">
               </div>
             </div>

             <!-- File staging area -->
             <div id="staging-area" style="display: none;">
               <h3>Files ready for upload:</h3>
               <div id="staged-files-list"></div>
               <div class="upload-controls">
                 <button id="upload-all-btn" onclick="uploadAllFiles()">Upload All Files</button>
                 <button id="clear-files-btn" onclick="clearStagedFiles()">Clear All</button>
               </div>
             </div>
           </div>
         </div>

         <div id="paste-tab" class="tab-content">
           <div class="pastebin">
             <div class="language-picker">
               <label for="language">Select Language:</label>
               <select id="language" value="plaintext">
                 {{ range $name, $val := .pasteLanguages }}
                 <option value="{{ $val }}" {{ if eq $val "" }}selected{{ end }}>{{ $name }}</option>
                 {{ end }}
               </select>
             </div>
             <textarea id="code-input" placeholder="Paste your code here..."></textarea>
             <div class="pastebin-controls">
               <button onclick="submitPaste()">Send</button>
             </div>
           </div>
         </div>

       <div id="audio-tab" class="tab-content">
         <div class="voice-recorder">

           <div class="recorder-controls">
             <button id="record-btn" onclick="toggleRecording()">Start Recording</button>
             <button id="stop-btn" onclick="stopRecording()" disabled>Stop</button>
             <span id="recording-time">00:00</span>
           </div>

           <audio id="audio-preview" controls style="display: none; width: 100%; margin-top: 10px;"></audio>

           <!-- Audio staging area -->
           <div id="audio-staging-area" style="display: none; margin-top: 30px;">
             <h3>Recorded audios ready for upload:</h3>
             <div id="staged-audio-list"></div>
             <div class="upload-controls">
               <button id="upload-all-audio-btn" onclick="uploadAllAudios()">Upload All Recordings</button>
               <button id="clear-audio-btn" onclick="clearStagedAudios()">Clear All</button>
             </div>
           </div>
         </div>
       </div>

       <div id="limits-tab" class="tab-content">
         <h2>Upload Limits</h2>
         <table>
           <tr>
             <td>Max File Size</td>
             <td>{{ .filesize }}MB</td>
           </tr>
           <tr>
             <td>Max Upload Per Day</td>
             <td>{{ .ratelimit }} files</td>
           </tr>
           <tr>
             <td>Your files will be kept for</td>
             <td>{{ .persistance }} hours</td>
           </tr>
           {{ if .storeLimit }}
           <tr>
             <td>Deletion</td>
             <td>The server may delete earlier if running out of space</td>
           </tr>
           {{ end }}
         </table>
        </div>
      </div>
      {{ end}}

      <div class="footer">
      <a href="https://github.com/matheusfillipe/girafiles" class="github-link"><i class="fab fa-github"></i> GitHub</a>
    </div>

    <script src="https://kit.fontawesome.com/a076d05399.js"></script>
    <script>
      $(document).ready(function () {
        $('#language').select2();
        $('#language').one('select2:open', function (e) {
          $('input.select2-search__field').prop('placeholder', 'Choose a language');
        });
      });
      function submitPaste() {
        // Get the code and selected language
        const code = document.getElementById('code-input').value.trim();
        const language = document.getElementById('language').value;

        if (!code) {
          alert('Please enter some text before sending');
          return;
        }

        // Submit as a form with file contents to the API
        var form = new FormData();
        form.append('file', new Blob([code], {type: 'text/plain'}), 'file');
        fetch('/api/', {
          method: 'POST',
          body: form,
        }).then((res) => res.json()).then((data) => {
          const param = language ? `?l=${language}` : '';
          window.location.href = `${data.url}/p${param}`;
        });
      }

      // File staging functionality
      let stagedFiles = [];
      let uploadResults = [];

      function handleFileDrop(event, uploadBox) {
        event.preventDefault();
        uploadBox.classList.remove('dragover');

        const files = Array.from(event.dataTransfer.files);
        stageFiles(files);
      }

      function handleFileSelect(event) {
        const files = Array.from(event.target.files);
        stageFiles(files);
        // Reset the input so the same files can be selected again if needed
        event.target.value = '';
      }

      function stageFiles(files) {
        if (files.length === 0) return;

        // Add files to staging area (avoid duplicates by name)
        files.forEach(file => {
          const isDuplicate = stagedFiles.some(staged => staged.name === file.name && staged.size === file.size);
          if (!isDuplicate) {
            stagedFiles.push(file);
          }
        });

        updateStagingArea();
      }

      function updateStagingArea() {
        const stagingArea = document.getElementById('staging-area');
        const filesList = document.getElementById('staged-files-list');

        if (stagedFiles.length === 0) {
          stagingArea.style.display = 'none';
          return;
        }

        stagingArea.style.display = 'block';

        // Create file list HTML
        let filesHTML = '<div class="staged-files">';
        stagedFiles.forEach((file, index) => {
          const fileSize = formatFileSize(file.size);
          filesHTML += `
            <div class="staged-file-item" data-index="${index}">
              <div class="file-info">
                <i class="fas fa-file"></i>
                <span class="file-name">${file.name}</span>
                <span class="file-size">(${fileSize})</span>
              </div>
              <button class="remove-file-btn" onclick="removeFile(${index})">
                <i class="fas fa-times"></i>
              </button>
            </div>
          `;
        });
        filesHTML += '</div>';

        filesList.innerHTML = filesHTML;
      }

      function removeFile(index) {
        stagedFiles.splice(index, 1);
        updateStagingArea();
      }

      function clearStagedFiles() {
        stagedFiles = [];
        updateStagingArea();
      }

      function formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
      }

      async function uploadAllFiles() {
        if (stagedFiles.length === 0) {
          alert('No files to upload');
          return;
        }

        const uploadBtn = document.getElementById('upload-all-btn');
        const originalText = uploadBtn.innerHTML;
        uploadBtn.disabled = true;
        uploadBtn.innerHTML = 'Uploading...';

        uploadResults = [];

        try {
          // Upload each file separately
          for (let i = 0; i < stagedFiles.length; i++) {
            const file = stagedFiles[i];
            uploadBtn.innerHTML = `Uploading ${i + 1}/${stagedFiles.length}...`;

            const form = new FormData();
            form.append('file', file);

            const response = await fetch('/api/', {
              method: 'POST',
              body: form,
            });

            const result = await response.json();
            if (result.url) {
              // Extract filename from URL
              const filename = result.url.split('/').pop();
              uploadResults.push(filename);
            }
          }

          if (uploadResults.length > 0) {
            if (uploadResults.length === 1) {
              // Single file - redirect to file page
              window.location.href = '/' + uploadResults[0];
            } else {
              // Multiple files - redirect to group page
              const groupId = uploadResults.join(',');
              window.location.href = '/group/' + groupId;
            }
          } else {
            alert('No files were uploaded successfully');
            uploadBtn.disabled = false;
            uploadBtn.innerHTML = originalText;
          }
        } catch (error) {
          alert('Upload failed: ' + error.message);
          uploadBtn.disabled = false;
          uploadBtn.innerHTML = originalText;
        }
      }

      // Audio recording functionality
      let mediaRecorder;
      let audioChunks = [];
      let recordingStartTime;
      let recordingInterval;
      let currentAudioBlob;
      let stagedAudios = [];
      let audioCounter = 1;

      function formatTime(seconds) {
        const mins = Math.floor(seconds / 60);
        const secs = seconds % 60;
        return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
      }

      function updateRecordingTime() {
        const elapsed = Math.floor((Date.now() - recordingStartTime) / 1000);
        document.getElementById('recording-time').textContent = formatTime(elapsed);
      }

      async function toggleRecording() {
        const recordBtn = document.getElementById('record-btn');
        const stopBtn = document.getElementById('stop-btn');
        const audioPreview = document.getElementById('audio-preview');
        const uploadBtn = document.getElementById('upload-audio-btn');

        if (!mediaRecorder || mediaRecorder.state === 'inactive') {
          try {
            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
            mediaRecorder = new MediaRecorder(stream);
            audioChunks = [];

            mediaRecorder.ondataavailable = event => {
              audioChunks.push(event.data);
            };

            mediaRecorder.onstop = () => {
              const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
              currentAudioBlob = audioBlob;

              // Automatically stage the recorded audio
              stageCurrentAudio();

              // Stop all tracks to release microphone
              stream.getTracks().forEach(track => track.stop());
            };

            recordingStartTime = Date.now();
            recordingInterval = setInterval(updateRecordingTime, 1000);

            mediaRecorder.start();
            recordBtn.textContent = 'Recording...';
            recordBtn.disabled = true;
            stopBtn.disabled = false;
            audioPreview.style.display = 'none';

          } catch (err) {
            alert('Error accessing microphone: ' + err.message);
          }
        }
      }

      function stopRecording() {
        if (mediaRecorder && mediaRecorder.state === 'recording') {
          mediaRecorder.stop();
          clearInterval(recordingInterval);

          const recordBtn = document.getElementById('record-btn');
          const stopBtn = document.getElementById('stop-btn');

          recordBtn.textContent = 'Start Recording';
          recordBtn.disabled = false;
          stopBtn.disabled = true;
        }
      }

      function stageCurrentAudio() {
        if (!currentAudioBlob) {
          alert('No audio recorded');
          return;
        }

        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const audioName = `Recording ${audioCounter} (${timestamp.split('T')[1].substring(0, 8)})`;

        const stagedAudio = {
          name: audioName,
          blob: currentAudioBlob,
          url: URL.createObjectURL(currentAudioBlob),
          timestamp: timestamp
        };

        stagedAudios.push(stagedAudio);
        audioCounter++;

        // Reset current recording state
        currentAudioBlob = null;
        document.getElementById('audio-preview').style.display = 'none';
        document.getElementById('recording-time').textContent = '00:00';

        updateAudioStagingArea();
      }


      function updateAudioStagingArea() {
        const stagingArea = document.getElementById('audio-staging-area');
        const audioList = document.getElementById('staged-audio-list');

        if (stagedAudios.length === 0) {
          stagingArea.style.display = 'none';
          return;
        }

        stagingArea.style.display = 'block';

        // Create audio list HTML
        let audiosHTML = '<div class="staged-files">';
        stagedAudios.forEach((audio, index) => {
          audiosHTML += `
            <div class="staged-file-item" data-index="${index}">
              <div class="file-info">
                <i class="fas fa-microphone"></i>
                <span class="file-name">${audio.name}</span>
              </div>
              <div class="audio-controls">
                <audio controls style="width: 200px; height: 30px;">
                  <source src="${audio.url}" type="audio/webm">
                </audio>
                <button class="remove-file-btn" onclick="removeStagedAudio(${index})">
                  <i class="fas fa-times"></i>
                </button>
              </div>
            </div>
          `;
        });
        audiosHTML += '</div>';

        audioList.innerHTML = audiosHTML;
      }

      function removeStagedAudio(index) {
        // Revoke the object URL to free memory
        URL.revokeObjectURL(stagedAudios[index].url);
        stagedAudios.splice(index, 1);
        updateAudioStagingArea();
      }

      function clearStagedAudios() {
        // Revoke all object URLs to free memory
        stagedAudios.forEach(audio => URL.revokeObjectURL(audio.url));
        stagedAudios = [];
        updateAudioStagingArea();
      }

      async function uploadAllAudios() {
        if (stagedAudios.length === 0) {
          alert('No audio recordings to upload');
          return;
        }

        const uploadBtn = document.getElementById('upload-all-audio-btn');
        const originalText = uploadBtn.innerHTML;
        uploadBtn.disabled = true;
        uploadBtn.innerHTML = 'Uploading...';

        let audioResults = [];

        try {
          // Upload each audio separately
          for (let i = 0; i < stagedAudios.length; i++) {
            const audio = stagedAudios[i];
            uploadBtn.innerHTML = `Uploading ${i + 1}/${stagedAudios.length}...`;

            const form = new FormData();
            const filename = `recording-${audio.timestamp}.webm`;
            form.append('file', audio.blob, filename);

            const response = await fetch('/api/', {
              method: 'POST',
              body: form,
            });

            const result = await response.json();
            if (result.url) {
              // Extract filename from URL
              const filename = result.url.split('/').pop();
              audioResults.push(filename);
            }
          }

          if (audioResults.length > 0) {
            if (audioResults.length === 1) {
              // Single audio - redirect to audio page
              window.location.href = '/' + audioResults[0];
            } else {
              // Multiple audios - redirect to group page
              const groupId = audioResults.join(',');
              window.location.href = '/group/' + groupId;
            }
          } else {
            alert('No audio recordings were uploaded successfully');
            uploadBtn.disabled = false;
            uploadBtn.innerHTML = originalText;
          }
        } catch (error) {
          alert('Upload failed: ' + error.message);
          uploadBtn.disabled = false;
          uploadBtn.innerHTML = originalText;
        }
      }

      // Tab functionality
      function openTab(evt, tabName) {
        const tabcontent = document.getElementsByClassName('tab-content');
        for (let i = 0; i < tabcontent.length; i++) {
          tabcontent[i].classList.remove('active');
        }

        const tablinks = document.getElementsByClassName('tab-button');
        for (let i = 0; i < tablinks.length; i++) {
          tablinks[i].classList.remove('active');
        }

        document.getElementById(tabName).classList.add('active');
        evt.currentTarget.classList.add('active');
      }
    </script>
    <script src="/static/shared.js"></script>
</body>

</html>
