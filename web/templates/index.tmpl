<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{{ .title }} - File Upload</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
  <link rel="stylesheet" href="/static/style.css">
  <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
  <!-- Include Select2 CSS and JS -->
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
  <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
  <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
</head>

<body>
  <div class="container">
    <h1>Welcome to {{ .title }}</h1>
    <p>Store and share your files securely with {{ .title }}.</p>

    <table>
      <tr>
        <td>Max File Size</td>
        <td>{{ .filesize }}MB</td>
      </tr>
      <tr>
        <td>Max Upload Per Day</td>
        <td>{{ .ratelimit }} files</td>
      </tr>
      <tr>
        <td>Your files will be kept for</td>
        <td>{{ .persistance }} hours</td>
      </tr>
      {{ if .storeLimit }}
      <tr>
        <td>Deletion</td>
        <td>The server may delete earlier if running out of space</td>
      </tr>
      {{ end }}
    </table>

    {{ if .authRequired}}
    <p>Only API uploads are accepted</p>
    {{ else}}
    <div class="tabs">
      <div class="tab-buttons">
        <button class="tab-button active" onclick="openTab(event, 'upload-tab')">File Upload</button>
        <button class="tab-button" onclick="openTab(event, 'paste-tab')">Text Paste</button>
        <button class="tab-button" onclick="openTab(event, 'audio-tab')">Audio Record</button>
      </div>

      <div id="upload-tab" class="tab-content active">
        <div class="code-container">
          <h4 style="text-align: start;">Curl upload</h4>
          <div class="code-line">
            <pre style="background-color: #111;"><code>curl -s -F "file=@/path/to/file" {{ .uploadEP }}</code></pre>
            <button onclick="copyCode()">Copy</button>
          </div>
        </div>

        <div class="upload-container">
          <div class="upload-box" ondrop="
              event.preventDefault();
              document.getElementById('file-upload').files = event.dataTransfer.files;
              document.getElementById('file-upload-form').submit()
              document.querySelector('.upload-box').classList.remove('dragover')
              " ondragover="event.preventDefault(); document.querySelector('.upload-box').classList.add('dragover')"
            ondragleave="document.querySelector('.upload-box').classList.remove('dragover')">
            <form action="/api/?redirect=true" method="post" enctype="multipart/form-data" id="file-upload-form">
              <label for="file-upload">Click or drop a file here to upload</label>
              <input type="file" id="file-upload" name="file"
                onchange="document.getElementById('file-upload-form').submit()">
            </form>
          </div>
        </div>
      </div>

      <div id="paste-tab" class="tab-content">
        <div class="pastebin">
          <h1>Create a Paste</h1>

          <div class="language-picker">
            <label for="language">Select Language:</label>
            <select id="language" value="plaintext">
              {{ range $name, $val := .pasteLanguages }}
              <option value="{{ $val }}" {{ if eq $val "" }}selected{{ end }}>{{ $name }}</option>
              {{ end }}
            </select>
          </div>
          <textarea id="code-input" placeholder="Paste your code here..."></textarea>
          <div class="pastebin-controls">
            <button onclick="submitPaste()">Send</button>
          </div>
        </div>
      </div>

      <div id="audio-tab" class="tab-content">
        <div class="voice-recorder">
          <h1>Record Audio</h1>

          <div class="recorder-controls">
            <button id="record-btn" onclick="toggleRecording()">Start Recording</button>
            <button id="stop-btn" onclick="stopRecording()" disabled>Stop</button>
            <span id="recording-time">00:00</span>
          </div>

          <audio id="audio-preview" controls style="display: none; width: 100%; margin-top: 10px;"></audio>

          <button id="upload-audio-btn" onclick="uploadAudio()" style="display: none; margin-top: 10px;">Upload Audio</button>
        </div>
      </div>
    </div>
    {{ end}}

    <div class="footer">
      <a href="https://github.com/matheusfillipe/girafiles" class="github-link"><i class="fab fa-github"></i> GitHub</a>
    </div>

    <script src="https://kit.fontawesome.com/a076d05399.js"></script>
    <script>
      $(document).ready(function () {
        $('#language').select2();
        $('#language').one('select2:open', function (e) {
          $('input.select2-search__field').prop('placeholder', 'Choose a language');
        });
      });
      function submitPaste() {
        // Get the code and selected language
        const code = document.getElementById('code-input').value.trim();
        const language = document.getElementById('language').value;

        if (!code) {
          alert('Please enter some text before sending');
          return;
        }

        // Submit as a form with file contents to the API
        var form = new FormData();
        form.append('file', new Blob([code], {type: 'text/plain'}), 'file');
        fetch('/api/', {
          method: 'POST',
          body: form,
        }).then((res) => res.json()).then((data) => {
          const param = language ? `?l=${language}` : '';
          window.location.href = `${data.url}/p${param}`;
        });
      }

      // Audio recording functionality
      let mediaRecorder;
      let audioChunks = [];
      let recordingStartTime;
      let recordingInterval;
      let currentAudioBlob;

      function formatTime(seconds) {
        const mins = Math.floor(seconds / 60);
        const secs = seconds % 60;
        return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
      }

      function updateRecordingTime() {
        const elapsed = Math.floor((Date.now() - recordingStartTime) / 1000);
        document.getElementById('recording-time').textContent = formatTime(elapsed);
      }

      async function toggleRecording() {
        const recordBtn = document.getElementById('record-btn');
        const stopBtn = document.getElementById('stop-btn');
        const audioPreview = document.getElementById('audio-preview');
        const uploadBtn = document.getElementById('upload-audio-btn');

        if (!mediaRecorder || mediaRecorder.state === 'inactive') {
          try {
            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
            mediaRecorder = new MediaRecorder(stream);
            audioChunks = [];

            mediaRecorder.ondataavailable = event => {
              audioChunks.push(event.data);
            };

            mediaRecorder.onstop = () => {
              const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
              currentAudioBlob = audioBlob;
              const audioUrl = URL.createObjectURL(audioBlob);

              audioPreview.src = audioUrl;
              audioPreview.style.display = 'block';
              uploadBtn.style.display = 'inline-block';

              // Stop all tracks to release microphone
              stream.getTracks().forEach(track => track.stop());
            };

            recordingStartTime = Date.now();
            recordingInterval = setInterval(updateRecordingTime, 1000);

            mediaRecorder.start();
            recordBtn.textContent = 'Recording...';
            recordBtn.disabled = true;
            stopBtn.disabled = false;
            audioPreview.style.display = 'none';
            uploadBtn.style.display = 'none';

          } catch (err) {
            alert('Error accessing microphone: ' + err.message);
          }
        }
      }

      function stopRecording() {
        if (mediaRecorder && mediaRecorder.state === 'recording') {
          mediaRecorder.stop();
          clearInterval(recordingInterval);

          const recordBtn = document.getElementById('record-btn');
          const stopBtn = document.getElementById('stop-btn');

          recordBtn.textContent = 'Start Recording';
          recordBtn.disabled = false;
          stopBtn.disabled = true;
        }
      }

      function uploadAudio() {
        if (!currentAudioBlob) {
          alert('No audio recorded');
          return;
        }

        const form = new FormData();
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const filename = `recording-${timestamp}.wav`;
        form.append('file', currentAudioBlob, filename);

        fetch('/api/', {
          method: 'POST',
          body: form,
        }).then((res) => res.json()).then((data) => {
          window.location.href = data.url;
        }).catch((error) => {
          alert('Upload failed: ' + error.message);
        });
      }

      // Tab functionality
      function openTab(evt, tabName) {
        const tabcontent = document.getElementsByClassName('tab-content');
        for (let i = 0; i < tabcontent.length; i++) {
          tabcontent[i].classList.remove('active');
        }

        const tablinks = document.getElementsByClassName('tab-button');
        for (let i = 0; i < tablinks.length; i++) {
          tablinks[i].classList.remove('active');
        }

        document.getElementById(tabName).classList.add('active');
        evt.currentTarget.classList.add('active');
      }
    </script>
    <script src="/static/shared.js"></script>
</body>

</html>
